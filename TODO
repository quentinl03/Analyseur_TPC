- Appeller GCC pour lier l'exécutable depuis le main, après la génération du NASM
- Tests
    - Revoir la structure
    - Erreurs sématiques
    - Faire des tests pour vérifier les tables de symboles, et arbres produits
    - Vérifier la validité du code nasm produit
        - Lier le code avec gcc, et exécuter en comparant à une sortie attendue ?
            - Trouver une structure d'organisation des tests
        - Comparer le nasm produit à un nasm fait à la main
            - lourd et pas pratique

- Table des symboles
    - Gérer les erreurs (redéclaration, etc...)
    - Alignement

- CI
    - Valgrind
        - Conditionnal jumps => Faire un test lourd
        - Memory leaks ?
- CD
    - Rapport avec Pandoc

- Betises
    - realloc ArrayList en mult et pas add

- Sémantique
  - Table des symboles
    - Cas autorisés
      - [X] On peut redéclarer une variable en local, si elle était globale
    - Cas interdits
      - [X] Redéclarer une variable globale déjà déclaré en global 
      - [X] Redéclarer une variable locale, déjà déclaré en local
      - [X] Redéclarer un paramètre, dans une liste de paramètres
      - [X] Redéclarer une variable locale, alors qu'elle existe en paramètre
  
  - [X] Utilisation d'une variable non déclarée
        ```c
        int main(void) {
            return a;
        }
        ```

  - [ ] Vérifier que l'on appelle pas une variable
        ```c
        int a;
        a();
        ```
  - [X] Vérifier que l'ont utilise pas une fonction comme une variable (sans l'appeler)
        ```c
        int f(void) {
            return 0;
        }
        int main(void) {
            return f + 1;
        }
        ```
  - [ ] Vérifier l'existence d'un main
  - [ ] Vérifier l'ordre de déclaration des fonctions (déclaration avant utilisation)
        ```c
        int f(void) {
            return g();
        }
        int g(void) {
            return 0;
        }
        ```
  - [ ] Vérifier le type des paramètres lors d'un appel de fonction
        ```c
        int f(char a, int b) {
            return 0;
        }
        int main(void) {
            f(10000, 'b');
            return 0;
        }
        ```
  - [ ] Vérifier le type de retour d'une fonction déclarée :
        ```c
        char f(void) {
            return 10000;
        }
        ```
  - [ ] Vérifier le type lors d'une assignation
        ```c
        char a;
        a = 10000 + f(10);
        ```

- Ne pas compiler le builtins.asm, mais copier son contenu dans le nasm généré

### Tests Caseine

- "Pointer to function '%s' used as rvalue (not allowed)"
    ```
    Test 108: Core - SemErr - 25
    Test 109: Core - SemErr - 26
    Test 110: Core - SemErr - 27
    ```

- "use of undeclared identifier '%s'"
    ```
    Test 87: Core - SemErr - 04
    Test 88: Core - SemErr - 05
    Test 89: Core - SemErr - 06
    Test 90: Core - SemErr - 07
    Test 91: Core - SemErr - 08
    Test 92: Core - SemErr - 09
    ```