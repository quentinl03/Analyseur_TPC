# TODO

## Important

- [ ] Nommer les labels en préfixant par un ``.``

- [X] Négation unaire (!)

- [X] Les appels de fonctions à revoir
  - Évaluer tous les arguments dans l'ordre inverse de leur apparition, en empilant successivement leur valeur dans la pile. Puis dépiler, les six premières valeurs de la pile vers les registres correspondants

- [ ] Convention d'appel pour les appels de fonctions, à minima pour les registres sauvegardé par l'appelant (*caller-save register*)
  - Pas vraiment utile ?

- [X] Ne pas compiler le builtins.asm, mais copier son contenu dans le NASM généré

- [X] Les divisions / modulos

- [X] Opérateur unaire (+/-)

- [X] Expressions booléennes

- [X] Instructions conditionnelles (if/else)

- [X] Boucles while

## A faire quand il y aura du temps / juste des idées

- [ ] Les frees !
  - 2 erreurs subsistent

~~- [ ] Appeler GCC pour lier l'exécutable depuis le main, après la génération du NASM~~

- Tests

    - [X] Erreurs sémantiques

    - [X] Faire des tests pour vérifier les tables de symboles, et arbres produits

    - [ ] Vérifier la validité du code NASM produit

        - Lier le code avec gcc, et exécuter en comparant à une sortie attendue ?
            - Trouver une structure d'organisation des tests

        -  Comparer le NASM produit à un NASM fait à la main
            - lourd et pas pratique

- CI
    - Valgrind
        - Conditionnal jumps => Faire un test lourd
        - Memory leaks ?
- CD
    - Rapport avec Pandoc

- Bêtises
    - [X] realloc ArrayList en mult et pas add

## Table des symboles

- [X] Gérer les erreurs (redéclaration, etc...)
- [ ] Alignement

## Sémantique

- Table des symboles
  - Cas autorisés
    - [X] On peut redéclarer une variable en local, si elle était globale
  - Cas interdits
    - [X] Redéclarer une variable globale déjà déclaré en global 
    - [X] Redéclarer une variable locale, déjà déclaré en local
    - [X] Redéclarer un paramètre, dans une liste de paramètres
    - [X] Redéclarer une variable locale, alors qu'elle existe en paramètre

- [X] Utilisation d'une variable non déclarée

    ```c
    int main(void) {
        return a;
    }
    ```

- [X] Vérifier que l'on appelle pas une variable

    ```c
    int a;
    a();
    ```

- [X] Vérifier que l'ont utilise pas une fonction comme une variable (
  sans l'appeler)

    ```c
    int f(void) {
        return 0;
    }
    int main(void) {
        return f + 1;
    }
    ```

- [X] Vérifier l'existence d'un main

- [X] Vérifier le prototype du main

  - [X] Type de retour

    ```c
    char main(void) {
        return 5;
    }
    ```

    ```shell
    ❯ clang -Wall -pedantic -std=c89 test.c -o test
    test.c:2:1: error: 'main' must return 'int'
    char main(void) {
    ^~~~
    int
    ```

    ```shell
    ❯ gcc -Wall -pedantic -std=c89 test.c -o test
    test.c:2:6: warning: return type of ‘main’ is not ‘int’ [-Wmain]
        2 | char main(void) {
        |      ^~~~
    ```

  - [X] Aucun arguments

- [X] Vérifier l'ordre de déclaration des fonctions (déclaration avant utilisation)

  ```c
  int f(void) {
      return g();
  }
  int g(void) {
      return 0;
  }
  ```


- [X] Fonction devant retourner une valeur, mais ne possède pas d'instructions return

  ```c
  int a;
  int f(void) {
      a = 1;
  }
  ```
  
  ```shell
  ❯ clang -Wall -pedantic -std=c89 test.c -o test
  test.c:5:1: warning: non-void function does not return a value [-Wreturn-type]
  }
  ^
  ```
  
  ```shell
  test.c: In function ‘f’:
  test.c:5:1: warning: control reaches end of non-void function [-Wreturn-type]
      5 | }
        | ^
  ```

- [X] Fonction possédant un return, devant retourner void mais possédant un return avec une valeur :

  ```c
  void f(void) {
      return 15;
  }
  ```
  Pour clang c'est une erreur, pour gcc un warning...
  
  ```shell
  ❯ clang -Wall -pedantic -std=c89 test.c -o test
  test.c:4:5: error: void function 'f' should not return a value [-Wreturn-type]
      return 15;
      ^      ~~
  ```
  
  ```shell
  ❯ gcc -Wall -pedantic -std=c89 test.c -o test
  test.c: In function ‘f’:
  test.c:4:12: warning: ‘return’ with a value, in function returning void [-Wreturn-type]
      4 |     return 15;
        |            ^~
  ```

- [X] Fonction possédant un return devant retourner non-void, mais possédant un return vide

  ```c
  int f(void) {
      return;
  }
  ```
  Pour clang c'est une erreur, pour gcc un warning...
  
  ```shell
  ❯ clang -Wall -pedantic -std=c89 test.c -o test
  test.c:4:5: error: non-void function 'f' should return a value [-Wreturn-type]
      return;
      ^
  ```
  
  ```shell
  ❯ gcc -Wall -pedantic -std=c89 test.c -o test
  test.c: In function ‘f’:
  test.c:4:5: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]
      4 |     return;
        |     ^~~~~~
  ```

- [X] Appel de fonction avec moins d'arguments que de paramètres

  ```c
  int f(int a, int b) {
    return 0;
  }

  int main(void) {
      return f(1);
  }
  ```

- [X] Appel de fonction avec plus d'arguments de paramètres

  ```c
  int f(int a, int b) {
      return 0;
  }

  int main(void) {
      return f(1, 2, 3);
  }
  ```

- [X] Appel de fonction avec des arguments, mais sur une fonction sans paramètres

  ```c
  int f(void) {
      return 0;
  }

  int main(void) {
      return f(1);
  }
  ```

- [X] Appel de fonction sans arguments, mais sur une fonction ayant des paramètres

  ```c
  int f(int a, int b) {
      return a + b;
  }

  int main(void) {
      return f();
  }
  ```

- [ ] Vérifier le type des paramètres lors d'un appel de fonction

  ```c
  int f(char a, int b) {
      return 0;
  }
  int main(void) {
      f(10000, 'b');
      return 0;
  }
  ```

- [ ] Vérifier le type de retour d'une fonction déclarée :

  ```c
  char f(void) {
      return 10000;
  }
  ```

- [ ] Vérifier le type lors d'une assignation

  ```c
  char a;
  a = 10000 + f(10);
  ```


## Tests Caseine

- "Pointer to function '%s' used as rvalue (not allowed)"
    ```
    Test 108: Core - SemErr - 25
    Test 109: Core - SemErr - 26
    Test 110: Core - SemErr - 27
    ```

- "use of undeclared identifier '%s'"
    ```
    Test 87: Core - SemErr - 04
    Test 88: Core - SemErr - 05
    Test 89: Core - SemErr - 06
    Test 90: Core - SemErr - 07
    Test 91: Core - SemErr - 08
    Test 92: Core - SemErr - 09
    ```
